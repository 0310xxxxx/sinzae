package com.smhrd.myapp.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;


// 해당하는 파일이 환경설정 파일임을 나타냄
// --> 해당 클래스 안쪽에서 @Bean(객체)들을 하나 이상 정의할 수 있게 해줌.
@Configuration
// 해당 클래스 파일이 "Spring Security"용 환경설정 파일임을 나타냄
@EnableWebSecurity
public class SecurityConfiguration {

	// Bean (객체)
	// : spring container에 적대될 수 있는 형태
	// 언제 많이 사용?
	// 1. 기능들을 사용자 정의형태로 만들어야 할 때 많이 사용한다.
	// 2. 모든 클래스 파일들이 공유해야 할 때
	
	// lambda 문법
	
	
	// class 안에 또다른 클래스 설계가 가능하다. --> inner class
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		// 해당하는 메소드가 동작하면서 SFC 생성할 거고, Bean으로써 등록
		// deprecated -- 더 이상 지원하지 않을 문법들.
		// SpringSecurity에서 매개변수로써 권장하는 문법
		// --> lambda식 == 익명함수(해당하는 영역에서만 사용하고, 버릴 함수)
		// 어나니머스 메소드
		// lambda 문법
		http.cors(null);
		
		return null;
		
	}
	
	
	
	
	
	
	
	
}
